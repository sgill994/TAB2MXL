plugins {
  id 'application'
  id 'org.openjfx.javafxplugin' version '0.0.8'
  id 'java'
  id 'jacoco'
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    // Use JUnit test framework
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    
    
    //JavaFX 
    testImplementation 'junit:junit:4.12'
    testCompile "org.testfx:testfx-core:4.0.16-alpha"
    testCompile "org.testfx:testfx-junit5:4.0.16-alpha"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testCompile group: 'org.hamcrest', name: 'hamcrest', version: '2.1'
}

test {
  useJUnitPlatform()
   finalizedBy jacocoTestReport
  testLogging {
    events 'passed', 'skipped', 'failed'
    
  } 
  finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.6"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    dependsOn test
}

jacoco {
    toolVersion = "0.8.6"
	reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}


javafx {
    version = "15"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

run {
    if (javafx.platform.classifier == 'win') {
        // Temporal fix for Eclipse with JDK 1.8 and Windows 
        systemProperty "java.library.path", "C:\tmp"
    }
}

mainClassName = 'application.MainLaunch'

task uberJar(type: Jar) {
	manifest {
    	attributes 'Main-Class': 'org.openjfx.Main'
  	}
    archiveClassifier = 'uber'

    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
 }
    
jar {
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes(
                'Implementation-Title': 'TAB2MXL',
                "Main-Class": "$mainClassName"
        )
    }
    destinationDirectory = file("$rootDir/production")
    archivesBaseName = 'TAB2MXL'
}



jacoco {
    toolVersion = "0.8.6"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

task debug {
	group = "application"
	description = "Run this project in debug mode on port 2311"
	doFirst {
		application{
			applicationDefaultJvmArgs =  ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=2311']
			
		}
	}
	
}

debug.finalizedBy run


